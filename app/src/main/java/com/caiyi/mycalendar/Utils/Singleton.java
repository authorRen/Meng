package com.caiyi.mycalendar.Utils;/** * Created by Renzeqiang . * 2017/7/30 */public class Singleton {    private Singleton() {    }    private static Singleton INSTACE = null;    /*//单线程环境下是可以的，多线程环境下还是会创建多个实例。    public static Singleton getInstance() {        if (INSTACE == null) {            INSTACE = new Singleton();        }        return INSTACE;    }*/    /*//每次通过getInstace获取实例时，试图去加上一个锁，但是加锁是一个耗时操作，尽量避免。    public static synchronized Singleton getInstance() {        if (INSTACE == null) {            INSTACE = new Singleton();        }        return INSTACE;    }*/    /*public static Singleton getInstance() {        if (INSTACE == null) {            synchronized (Singleton.class) {                if (INSTACE == null) {                    INSTACE = new Singleton();                }            }        }        return INSTACE;    }*/    /**     * 懒汉模式-懒汉模式实现是按需加载的单例模式。     * 只有当我们需要的时候调用getInstance方法才会实例这个单例。     */    /*public static final Singleton getInstance() {        return MyInstance.INSTANCE;    }    public static class MyInstance {        private static final Singleton INSTANCE = new Singleton();    }*/    /**     * 饿汉模式-饿汉就是类一旦加载，就是单例初始化完成，保证getInstance的时候实例已经存在。     * 类在创建的同时就已经创建好一个静态的对象供系统使用，以后不会在变，天生是线程安全的。     */    private static final Singleton INSTANCE = new Singleton();    public static final Singleton getInstance() {        return INSTANCE;    }}